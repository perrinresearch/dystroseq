"""
Fix PDB format to ensure proper column alignment for VMD compatibility.
"""

from pathlib import Path


def create_proper_pdb_file():
    """Create a properly formatted PDB file."""
    
    print("Creating properly formatted PDB file...")
    
    # Read the existing combined structure data
    with open("combined_dystrophin.pdb", 'r') as f:
        lines = f.readlines()
    
    # Extract atom lines
    atom_lines = [line for line in lines if line.startswith('ATOM')]
    
    print(f"Found {len(atom_lines)} atom lines to reformat")
    
    # Create new PDB file with proper formatting
    with open("combined_dystrophin_fixed.pdb", 'w') as f:
        # Write header
        f.write("HEADER    COMBINED DYSTROPHIN STRUCTURE                   01-JAN-24   COMB\n")
        f.write("TITLE     COMBINED ALPHAFOLD STRUCTURES FOR DYSTROPHIN\n")
        f.write("REMARK   1 CONFIDENCE SCORES STORED IN B-FACTOR COLUMN\n")
        f.write("REMARK   2 GENERATED BY DYSTROSEQ STRUCTURE COMBINER\n")
        f.write("REMARK   3 FORMAT FIXED FOR VMD COMPATIBILITY\n\n")
        
        # Write atoms with proper PDB format
        for i, line in enumerate(atom_lines):
            if line.startswith('ATOM'):
                # Parse the existing line
                parts = line.split()
                if len(parts) >= 11:
                    try:
                        atom_id = parts[1]
                        atom_name = parts[2]
                        residue_name = parts[3]
                        chain_id = parts[4]
                        seq_id = int(parts[5])
                        x = float(parts[6])
                        y = float(parts[7])
                        z = float(parts[8])
                        occupancy = float(parts[9])
                        b_factor = float(parts[10])
                        element = parts[11] if len(parts) > 11 else atom_name[0]
                        
                        # Format according to PDB specification
                        # Columns: 1-6, 7-11, 13-16, 17, 18-20, 22, 23-26, 31-38, 39-46, 47-54, 55-60, 61-66, 77-78
                        pdb_line = f"ATOM  {i+1:5d}  {atom_name:4s} {residue_name:3s} {chain_id:1s}{seq_id:4d}    {x:8.3f}{y:8.3f}{z:8.3f}  {occupancy:4.2f}{b_factor:6.2f}           {element:2s}\n"
                        f.write(pdb_line)
                        
                    except (ValueError, IndexError) as e:
                        print(f"Warning: Could not parse line {i+1}: {e}")
                        continue
        
        # Write END
        f.write("END\n")
    
    print("Fixed PDB file created: combined_dystrophin_fixed.pdb")


def create_proper_cif_file():
    """Create a properly formatted CIF file."""
    
    print("Creating properly formatted CIF file...")
    
    # Read the existing combined structure data
    with open("combined_dystrophin.pdb", 'r') as f:
        lines = f.readlines()
    
    # Extract atom lines
    atom_lines = [line for line in lines if line.startswith('ATOM')]
    
    # Create new CIF file with proper formatting
    with open("combined_dystrophin_fixed.cif", 'w') as f:
        # Write CIF header
        f.write("data_combined_dystrophin\n")
        f.write("# Combined AlphaFold structures for dystrophin\n")
        f.write("# Generated by DystroSeq structure combiner\n")
        f.write("# Confidence scores stored in B-factor column\n")
        f.write("# Format fixed for VMD compatibility\n\n")
        
        # Write cell parameters
        f.write("_cell.length_a    200.0\n")
        f.write("_cell.length_b    200.0\n")
        f.write("_cell.length_c    200.0\n")
        f.write("_cell.angle_alpha 90.0\n")
        f.write("_cell.angle_beta  90.0\n")
        f.write("_cell.angle_gamma 90.0\n\n")
        
        # Write space group
        f.write("_space_group.name_H-M 'P 1'\n")
        f.write("_space_group.IT_number 1\n\n")
        
        # Write atom site loop
        f.write("loop_\n")
        f.write("_atom_site.group_PDB\n")
        f.write("_atom_site.id\n")
        f.write("_atom_site.type_symbol\n")
        f.write("_atom_site.label_atom_id\n")
        f.write("_atom_site.label_alt_id\n")
        f.write("_atom_site.label_comp_id\n")
        f.write("_atom_site.label_asym_id\n")
        f.write("_atom_site.label_entity_id\n")
        f.write("_atom_site.label_seq_id\n")
        f.write("_atom_site.pdbx_PDB_ins_code\n")
        f.write("_atom_site.Cartn_x\n")
        f.write("_atom_site.Cartn_y\n")
        f.write("_atom_site.Cartn_z\n")
        f.write("_atom_site.occupancy\n")
        f.write("_atom_site.B_iso_or_equiv\n")
        f.write("_atom_site.pdbx_formal_charge\n")
        f.write("_atom_site.auth_seq_id\n")
        f.write("_atom_site.auth_comp_id\n")
        f.write("_atom_site.auth_atom_id\n")
        f.write("_atom_site.auth_asym_id\n")
        f.write("_atom_site.pdbx_PDB_model_num\n")
        
        # Write atom data
        for i, line in enumerate(atom_lines):
            if line.startswith('ATOM'):
                parts = line.split()
                if len(parts) >= 11:
                    try:
                        atom_name = parts[2]
                        residue_name = parts[3]
                        chain_id = parts[4]
                        seq_id = int(parts[5])
                        x = float(parts[6])
                        y = float(parts[7])
                        z = float(parts[8])
                        occupancy = float(parts[9])
                        b_factor = float(parts[10])
                        element = parts[11] if len(parts) > 11 else atom_name[0]
                        
                        # Write CIF atom line
                        f.write(f"ATOM {i+1:5d} {element:2s} {atom_name:4s} . {residue_name:3s} {chain_id:1s} 1 {seq_id:4d} ? "
                               f"{x:8.3f} {y:8.3f} {z:8.3f} {occupancy:4.2f} {b_factor:6.2f} ? "
                               f"{seq_id:4d} {residue_name:3s} {atom_name:4s} {chain_id:1s} 1\n")
                        
                    except (ValueError, IndexError) as e:
                        print(f"Warning: Could not parse line {i+1}: {e}")
                        continue
    
    print("Fixed CIF file created: combined_dystrophin_fixed.cif")


def main():
    """Main function to fix file formats."""
    print("=" * 60)
    print("FIXING PDB AND CIF FILE FORMATS")
    print("=" * 60)
    
    # Check if original files exist
    if not Path("combined_dystrophin.pdb").exists():
        print("Error: combined_dystrophin.pdb not found!")
        return
    
    # Create properly formatted files
    create_proper_pdb_file()
    create_proper_cif_file()
    
    print("\nFixed files created:")
    print("  - combined_dystrophin_fixed.pdb (VMD-compatible PDB format)")
    print("  - combined_dystrophin_fixed.cif (Proper CIF format)")
    print("\nThese files should now load correctly in VMD and other molecular viewers.")


if __name__ == "__main__":
    main()
