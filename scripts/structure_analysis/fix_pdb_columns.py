"""
Fix the PDB column alignment issue.
"""

import os
import glob
import json
import numpy as np
from pathlib import Path
from typing import List, Dict, Tuple, Optional
import re


def extract_exon_range(dirname: str) -> Tuple[Optional[int], Optional[int]]:
    """Extract exon range from directory name."""
    parts = dirname.split('_')
    if len(parts) >= 4 and parts[1] == 'exons':
        try:
            start_exon = int(parts[2])
            end_exon = int(parts[3])
            return start_exon, end_exon
        except ValueError:
            pass
    
    # Fallback: try to extract numbers from the string
    numbers = re.findall(r'\d+', dirname)
    if len(numbers) >= 2:
        return int(numbers[0]), int(numbers[1])
    
    return None, None


def load_confidence_data(structure_dir: Path) -> List[float]:
    """Load confidence data for a structure."""
    confidence_files = list(structure_dir.glob("*_full_data_*.json"))
    if not confidence_files:
        return []
    
    # Load the first confidence file
    with open(confidence_files[0], 'r') as f:
        data = json.load(f)
    
    return data.get('atom_plddts', [])


def parse_cif_file_correctly(cif_file: Path) -> List[Dict]:
    """Parse a CIF file correctly by understanding the actual format."""
    atoms = []
    
    with open(cif_file, 'r') as f:
        lines = f.readlines()
    
    in_atom_site = False
    
    for line in lines:
        line = line.strip()
        
        if line.startswith('_atom_site.'):
            in_atom_site = True
            continue
        
        elif line.startswith('ATOM') and in_atom_site:
            # Parse the actual format: ATOM id type atom_id . residue chain entity seq_id ? x y z occupancy b_factor auth_seq_id auth_chain model
            fields = line.split()
            if len(fields) >= 15:
                try:
                    atom_data = {
                        'atom_id': fields[3],  # atom name (N, CA, C, etc.)
                        'residue': fields[5],  # residue name (MET, LEU, etc.)
                        'seq_id': int(fields[8]),  # sequence ID
                        'x': float(fields[10]),  # x coordinate
                        'y': float(fields[11]),  # y coordinate
                        'z': float(fields[12]),  # z coordinate
                        'b_factor': float(fields[14])  # B-factor
                    }
                    atoms.append(atom_data)
                except (ValueError, IndexError) as e:
                    continue
        
        elif line.startswith('#') and in_atom_site:
            # End of atom site section
            break
    
    return atoms


def find_structures(base_dir: str) -> List[Dict]:
    """Find all structure directories and their data."""
    base_path = Path(base_dir)
    structures = []
    
    structure_dirs = [d for d in os.listdir(base_path) 
                     if os.path.isdir(base_path / d) and d.startswith('dystroseq_exons_')]
    
    for structure_dir in sorted(structure_dirs):
        print(f"Processing {structure_dir}...")
        
        # Extract exon range
        start_exon, end_exon = extract_exon_range(structure_dir)
        if start_exon is None or end_exon is None:
            print(f"Warning: Could not extract exon range from {structure_dir}")
            continue
        
        # Find CIF files
        cif_files = list((base_path / structure_dir).glob("*_model_0.cif"))
        if not cif_files:
            print(f"Warning: No model_0.cif files found in {structure_dir}")
            continue
        
        # Load confidence data
        confidence_data = load_confidence_data(base_path / structure_dir)
        
        structures.append({
            'name': structure_dir,
            'start_exon': start_exon,
            'end_exon': end_exon,
            'cif_file': cif_files[0],
            'confidence_data': confidence_data
        })
    
    return structures


def create_correct_pdb_file(atoms: List[Dict], confidence_scores: List[float], output_file: str):
    """Create a PDB file with correct column alignment."""
    print(f"Creating PDB file with correct column alignment: {output_file}")
    
    with open(output_file, 'w') as f:
        # Write header
        f.write("HEADER    COMBINED DYSTROPHIN STRUCTURE                   01-JAN-24   COMB\n")
        f.write("TITLE     COMBINED ALPHAFOLD STRUCTURES FOR DYSTROPHIN\n")
        f.write("REMARK   1 CONFIDENCE SCORES STORED IN B-FACTOR COLUMN\n")
        f.write("REMARK   2 GENERATED BY DYSTROSEQ STRUCTURE COMBINER\n")
        f.write("REMARK   3 CORRECT COLUMN ALIGNMENT FOR VMD COMPATIBILITY\n\n")
        
        # Write atoms with correct PDB format
        for i, atom in enumerate(atoms):
            # Get confidence score for this atom
            confidence = 50.0  # Default confidence
            if i < len(confidence_scores):
                confidence = confidence_scores[i]
            
            # Get element symbol from atom name
            element = atom['atom_id'][0] if atom['atom_id'] else 'C'
            
            # Format according to PDB specification with correct column positions
            # ATOM      1  N   MET A   1      14.062 -12.405  -3.519  1.00 22.40           N
            # 12345678901234567890123456789012345678901234567890123456789012345678901234567890
            #          1         2         3         4         5         6         7         8
            pdb_line = f"ATOM  {i+1:5d}  {atom['atom_id']:4s}{atom['residue']:3s} A{atom['seq_id']:4d}    {atom['x']:8.3f}{atom['y']:8.3f}{atom['z']:8.3f}  {1.00:4.2f}{confidence:6.2f}           {element:2s}\n"
            f.write(pdb_line)
        
        # Write END
        f.write("END\n")
    
    print(f"Correctly formatted PDB file created: {output_file}")


def main():
    """Main function to create correctly formatted PDB file."""
    base_dir = "../../../Data/dystrophin/folds_2025_10_22_19_55"
    
    print("=" * 60)
    print("FIXING PDB COLUMN ALIGNMENT")
    print("=" * 60)
    
    # Find all structures
    print("Finding AlphaFold structures...")
    structures = find_structures(base_dir)
    
    if not structures:
        print("No structures found!")
        return
    
    print(f"Found {len(structures)} structures")
    
    # Combine structures
    print("\nCombining structures...")
    combined_atoms = []
    combined_confidence = []
    
    # Sort structures by start exon
    sorted_structures = sorted(structures, key=lambda x: x['start_exon'])
    
    for i, struct in enumerate(sorted_structures):
        print(f"Processing {struct['name']}...")
        
        # Parse CIF file correctly
        atoms = parse_cif_file_correctly(struct['cif_file'])
        confidence = struct['confidence_data']
        
        # Adjust sequence IDs to avoid conflicts
        if combined_atoms:
            max_seq_id = max(atom['seq_id'] for atom in combined_atoms)
            for atom in atoms:
                atom['seq_id'] += max_seq_id
        
        combined_atoms.extend(atoms)
        combined_confidence.extend(confidence)
        
        print(f"  Added {len(atoms)} atoms")
    
    print(f"\nCombined structure has {len(combined_atoms)} atoms")
    
    # Create correctly formatted PDB file
    print("\nCreating correctly formatted PDB file...")
    create_correct_pdb_file(combined_atoms, combined_confidence, "dystrophin_fixed_columns.pdb")
    
    print(f"\nCorrectly formatted PDB file created:")
    print(f"  - dystrophin_fixed_columns.pdb (VMD-compatible PDB format)")
    print(f"  - Total atoms: {len(combined_atoms)}")
    print(f"  - Confidence scores: {len(combined_confidence)}")
    print(f"  - This file should now load correctly in VMD with proper column alignment.")


if __name__ == "__main__":
    main()
